
//
//
// 	------------------------------------------------------------------
// 	Javascript
//
@js-foreground-color: hsl(220, 10%, 75%);
@js-alt-color: multiply(@tower-gray, @js-foreground-color);
@js-desaturated-alt-color: desaturate(@js-alt-color,20%);
@js-parens-active-color: darken(@js-desaturated-alt-color, 10%);
.@{s}js {
  /*-------  Main text color  -------*/
  color: @js-foreground-color;

  /*----- Comment Color -----*/
  &.@{s}comment {
    color: hsl(233, 15%, 35%);
  }

  /**
  * The word 'const'
  */
  &.@{s}storage.@{s}type {
    -webkit-text-stroke-width: 0;
  }

  /*-------  Round/Curly Braces  -------*/
  &.@{s}meta.@{s}brace {
    color: hsl(191, 9%, 38%);
    font-weight: 700;
    &.@{s}curly,
    &.@{s}round {
      &:first-of-type,
      & + &,
      .leading-whitespace ~ &:nth-last-child(1):not(.round),
      &:only-child:nth-last-child(2):not(.round),
      .punctuation.terminator.statement {
        color: @gray-blend;
      }
    }
  }
  /*-------  Commas  -------*/
  &.@{s}meta.@{s}brace.@{s}comma {
    color: @js-alt-color;
  }
  /*-------  Semicolon  -------*/
  &.@{s}punctuation.@{s}terminator.@{s}statement {
    color: hsl(180, 5%, 35%);
    -webkit-text-stroke-width: @text-stroke-width-normal;
  }
  /*-------  Period (method/object delimiters)  -------*/
  &.@{s}meta.@{s}delimiter.@{s}method.@{s}period {
    color: @yellow;
    font-weight: 700;
  }

  /**
  * Parentheses used in method calls
  */
  &.@{s}punctuation.@{s}bracket.@{s}round.@{s}arguments {
    &.@{s}begin, &.@{s}end {
      color: hsl(191, 9%, 38%);
    }
  }

  &.@{s}punctuation {
    color: @dark-gray;
  }

  /**
  * objects
  */
  &.@{s}object.@{s}key {
    // the object key itself
    .@{s}string {
      color: hsl(50, 35%, 65%);
    }
    // the colon
    &@{s}punctuation {
      color: hsl(50, 35%, 65%);
    }
  }

  &.@{s}storage.@{s}type {
    font-weight: normal;
    color: @light-gray;
  }
  //
  //
  // ------------------------------------------------------------------------
  // KEYWORDS
  //
  /*-------  The Word "function"  -------*/
  &.@{s}storage.@{s}type.@{s}function {
    font-style: normal;
    font-weight: 700;
    -webkit-text-stroke-width: @text-stroke-width-normal;
    color: hsl(60, 11%, 75%);
  }
  &.@{s}storage.@{s}type.@{s}var {
    color: @tomato;
    font-style: italic;
  }
  /*----- Function declarations ------*/
  // ex: function myFunc(args) {...} (these can be declared after calls).
  &.@{s}meta.@{s}function {
    &.@{s}storage.@{s}type.@{s}function {
      color: hsl(59, 11%, 75%);
      font-weight: 400;
      -webkit-text-stroke-width: @text-stroke-width-normal;

    }
    &.@{s}entity.@{s}name.@{s}function {
      font-weight: 700;
      color: hsl(82, 50%, 55%);
    }
  }

  &.@{s}entity.@{s}name.@{s}function {
    color: hsl(190, 20%, 65%);
  }
  /**
  * A function name when called.
  * e.g. `method` in instance.method()
  */
  &.@{s}method-call > .@{s}entity.@{s}name.@{s}function {
    font-weight: 400;
    color: hsl(131, 45%, 70%);
  }
  /*-------  an operator which follows a defined function's name  -------*/
  // example: the '=' operator in the above example.
  &.@{s}entity.@{s}name.@{s}function + .@{s}keyword.operator {
    -webkit-text-stroke-width: @text-stroke-width-normal;
    color: hsl(240, 15%, 70%);
    font-weight: normal;
  }
  /*-------  Matches class created with prototype  -------*/
  // ex: Sound.prototype = { ... }    <===== Matches 'Sound'
  &.@{s}support {
    &.@{s}class {
      color: hsl(48, 100%, 54%);
    }
    // Matches the word 'prototype'
    &.@{s}constant {
      color: @blue;
    }
    // matches the '=' after 'prototype'
    &.@{s}constant + &.@{s}operator {
      text-shadow: none;
    }
  }
  & .@{s}keyword {
    color: hsl(256, 50%, 60%);
    font-weight: 500;
    &.@{s}operator {
      color: @yellow;
      &:not(:first-child):not(:last-child) {
        color: @raspberry;
      }
      &.@{s}new {
        color: hsl(250, 21%, 82%);
        font-weight: bold;
        -webkit-text-stroke: 0.01em;
      }
    }
  }
  //
  // ------------------------------------------------------------------------
  // Strings
  @string-sulu: multiply(@string-color, @sulu);
  @js-string-color: hsl(74, 50%, 55%);
  &.@{s}string:not(.@{s}unquoted){
    color: @js-string-color;
  }
  &.@{s}string.@{s}quoted.@{s}single {
    color: @js-string-color;
  }
  &.@{s}string.@{s}quoted.@{s}double {
    color: @js-string-color;
  }
  &.@{s}string.@{s}begin + .@{s}entity.@{s}name.@{s}function,
  &.@{s}string.@{s}begin:first-child,
  &.@{s}string.@{s}end:last-child,
  &.@{s}leading-whitespace + .@{s}string.@{s}begin,
  &.@{s}entity.@{s}name.@{s}function + .@{s}string.@{s}end {
    color: saturate(lighten(@string-sulu, 10%), 10%);
  }
  &.@{s}meta.@{s}brace.@{s}round + .@{s}string.@{s}quoted.@{s}single * {
    color: saturate(lighten(@string-sulu, 10%), 10%);
  }
  &.@{s}meta.@{s}brace.@{s}round + .@{s}string.@{s}quoted.@{s}double * {
    color: saturate(lighten(@string-sulu, 10%), 10%);
  }
  &.@{s}storage.@{s}type.@{s}function {
    color: hsl(60, 11%, 75%);
  }
  &.@{s}meta.@{s}function {
    > .@{s}parameters.@{s}begin,
    > .parameters.@{s}end {
      color: @tower-gray;
    }
  }
  &.@{s}function {
    &.@{s}meta& {
      color: @sulu;
    }
  }
  &.@{s}variable {
    color: @js-foreground-color;
    font-weight: 400;
    font-style: normal;
  }
  &.@{s}variable.@{s}language.@{s}js {
    color: @orange;
    font-weight: bold;
  }
  &.@{s}variable.@{s}language.@{s}this {
    color: @orange;
  }
  &.@{s}variable.@{s}parameter {
    font-weight: 200;
    color: hsl(300, 35%, 70%);
  }
  &.@{s}leading-whitespace ~ .@{s}keyword.operator {
    color: spin(saturate(darken(@js-foreground-color, 30%),70%), 330);
    // font-weight: normal;
  }
}
